{"ast":null,"code":"import _objectSpread from \"/Users/greg/Desktop/code/itlogger/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG } from \"../actions/types\";\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return _objectSpread({}, state, {\n        logs: action.payload,\n        loading: false\n      });\n\n    case ADD_LOG:\n      return _objectSpread({}, state, {\n        logs: [...state.logs, action.payload],\n        loading: false\n      });\n\n    case DELETE_LOG:\n      return _objectSpread({}, state, {\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      });\n\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/greg/Desktop/code/itlogger/src/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","initialState","logs","current","loading","error","state","action","type","payload","filter","log","id","console"],"mappings":";AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,QAMO,kBANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,QAAL;AACE,+BACKU,KADL;AAEEJ,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAFf;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,OAAL;AACE,+BACKO,KADL;AAEEJ,QAAAA,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgBK,MAAM,CAACE,OAAvB,CAFR;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKJ,UAAL;AACE,+BACKM,KADL;AAEEJ,QAAAA,IAAI,EAAEI,KAAK,CAACJ,IAAN,CAAWQ,MAAX,CAAkBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAA3C,CAFR;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,WAAL;AACE,+BACKS,KADL;AAEEF,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKN,UAAL;AACEe,MAAAA,OAAO,CAACR,KAAR,CAAcE,MAAM,CAACE,OAArB;AACA,+BACKH,KADL;AAEED,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFhB;;AAIF;AACE,aAAOH,KAAP;AA/BJ;AAiCD,CAlCD","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG\n} from \"../actions/types\";\n\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false\n      };\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [...state.logs, action.payload],\n        loading: false\n      };\n    case DELETE_LOG:\n      return {\n        ...state,\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}