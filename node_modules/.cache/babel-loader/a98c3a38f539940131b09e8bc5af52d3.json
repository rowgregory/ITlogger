{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Desktop/code/itlogger/src/components/logs/Logs.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport LogItem from \"./LogItem\";\nimport Preloader from \"../layout/Preloader\";\nimport PropTypes from \"prop-types\";\nimport { getLogs } from \"../../actions/logActions\";\n\nconst Logs = ({\n  log: {\n    logs,\n    loading\n  },\n  getLogs\n}) => {\n  useEffect(() => {\n    getLogs(); //eslint-disable-next-line\n  }, []);\n\n  if (loading || logs === null) {\n    return React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"ul\", {\n    className: \"collection with-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"colection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"System Logs\")), !loading && logs.length === 0 ? React.createElement(\"p\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"No logs to show\") : logs.map(log => React.createElement(LogItem, {\n    log: log,\n    key: log.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n};\n\nLogs.propTypes = {\n  log: PropTypes.object.isRequired\n}; // if you want to get anything from your app level state\n// and bring it into the compoenent, you bring it in as a prop\n\nconst mapStateToProps = state => ({\n  log: state.log\n});\n\nexport default connect(mapStateToProps, {\n  getLogs\n})(Logs);","map":{"version":3,"sources":["/Users/greg/Desktop/code/itlogger/src/components/logs/Logs.js"],"names":["React","useEffect","connect","LogItem","Preloader","PropTypes","getLogs","Logs","log","logs","loading","length","map","id","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AAA0BJ,EAAAA;AAA1B,CAAD,KAAyC;AACpDL,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,OAAO,GADO,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAII,OAAO,IAAID,IAAI,KAAK,IAAxB,EAA8B;AAC5B,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACE;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIG,CAACC,OAAD,IAAYD,IAAI,CAACE,MAAL,KAAgB,CAA5B,GACC;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,GAGCF,IAAI,CAACG,GAAL,CAASJ,GAAG,IAAI,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,GAAd;AAAmB,IAAA,GAAG,EAAEA,GAAG,CAACK,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,CAPJ,CADF;AAYD,CArBD;;AAuBAN,IAAI,CAACO,SAAL,GAAiB;AACfN,EAAAA,GAAG,EAAEH,SAAS,CAACU,MAAV,CAAiBC;AADP,CAAjB,C,CAIA;AACA;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCV,EAAAA,GAAG,EAAEU,KAAK,CAACV;AADqB,CAAL,CAA7B;;AAIA,eAAeN,OAAO,CACpBe,eADoB,EAEpB;AAAEX,EAAAA;AAAF,CAFoB,CAAP,CAGbC,IAHa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport LogItem from \"./LogItem\";\nimport Preloader from \"../layout/Preloader\";\nimport PropTypes from \"prop-types\";\nimport { getLogs } from \"../../actions/logActions\";\n\nconst Logs = ({ log: { logs, loading }, getLogs }) => {\n  useEffect(() => {\n    getLogs();\n    //eslint-disable-next-line\n  }, []);\n\n  if (loading || logs === null) {\n    return <Preloader />;\n  }\n  return (\n    <ul className=\"collection with-header\">\n      <li className=\"colection-header\">\n        <h4 className=\"center\">System Logs</h4>\n      </li>\n      {!loading && logs.length === 0 ? (\n        <p className=\"center\">No logs to show</p>\n      ) : (\n        logs.map(log => <LogItem log={log} key={log.id} />)\n      )}\n    </ul>\n  );\n};\n\nLogs.propTypes = {\n  log: PropTypes.object.isRequired\n};\n\n// if you want to get anything from your app level state\n// and bring it into the compoenent, you bring it in as a prop\nconst mapStateToProps = state => ({\n  log: state.log\n});\n\nexport default connect(\n  mapStateToProps,\n  { getLogs }\n)(Logs);\n"]},"metadata":{},"sourceType":"module"}